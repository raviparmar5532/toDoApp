package com.example.demo.Task;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class TaskService {
	@Autowired
	private TaskDAO taskDao;
	
//	Retrive all task list
	public List<Task> getAllTask() {
		return taskDao.findAll();
	}
//	Add new task
	public String addTask(Task T) {
		try {
			T.isPropertyNull();
			taskDao.save(T);
			return "New Task Created";
		} catch (Exception e) {
			return e.getMessage();
		}
	}
//	task detail by task id
	public String gettaskById(Integer id) {
		try {
			return taskDao.getReferenceById(id).toString();			
		} catch (Exception e) {
			return e.getMessage();
		}
	}
//	updating a task as a whole (PUT request)
	public String updateTask(Task T) {
		try {
			T.isPropertyNull();
			Integer id = T.getTaskId();
			if(taskDao.existsById(id)) {
				taskDao.save(T);
				return "Task Updated";
			}			
			else return "No Task with ID = "+id+" exists";
		} catch (Exception e) {
			return e.getMessage();
		}
	}
	
	
//	updating a task field (PATCH request)
	public String updateTaskField(Task T) {
		Integer id = T.getTaskId();
		try {
			if(id==null) return "Id cannot be null";
			Task oldT = taskDao.getReferenceById(id);
			boolean isUpdated = false;
			if(T.getName() != null) {
				oldT.setName(T.getName());
				isUpdated = true;
			}
			if(T.getIsPending() != null) {
				oldT.setIsPending(T.getIsPending());
				isUpdated = true;
			}
			if(!isUpdated) return "No field to update";
			taskDao.save(oldT);
			return "One or more fields updated";
		} catch (Exception e) {
			return "No Task with ID = "+id+" exists";
		}
	}
	
//	deleting a task by id
	public String deleteById(Integer id) {
		try {
			if(taskDao.existsById(id)) {
				taskDao.deleteById(id);		
				return "Task Deleted";
			}
			else return "No Task with ID = "+id+" exists";
		}
		catch(Exception e) {
			return e.getMessage();
		}
	}
	
/*
 *  	Person Methods
 */
	
//	
}
