package com.example.demo.Person;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.annotations.DynamicUpdate;

import com.example.demo.Project.Project;
import com.example.demo.Task.Task;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;

@Entity
@DynamicUpdate
@Table(name = "person")
public class Person {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "person_id")
	private Integer personId;
	@Column(name = "person_name")
	private String personName;
	@OneToMany(mappedBy = "person") 
	private List<Task>tasks;
	@ManyToMany(mappedBy = "persons")
	private List<Project>projects; 
	public Integer getPersonId() {
		return personId;
	}
	public void setPersonId(Integer personId) {
		this.personId = personId;
	}
	public String getName() {
		return personName;
	}
	public String getPersonName() {
		return personName;
	}
	public void setPersonName(String personName) {
		this.personName = personName;
	}
	public void setName(String name) {
		this.personName = name;
	}
	public List<Task> getTasks() {
		return tasks;
	}
	public void setTasks(List<Task> tasks) {
		this.tasks = tasks;
	}
	public List<Project> getProjects() {
		return projects;
	}
	public void setProjects(List<Project> projects) {
		this.projects = projects;
	}
	
	
	
	public void addTask(Task T) {
		this.tasks.add(T);
		T.setPerson(this);
	}
	public void removeTask(Task T) {
		this.tasks.remove(T);
		T.setPerson(null);
	}
	public void addProject(Project P) {
		if(this.projects == null) this.projects = new ArrayList<>();
		this.projects.add(P);
	}
	public void removeProject(Project P) {
		this.projects.remove(P);
		P.removePerson(this);
	}
	@Override
	public String toString() {
		return "Person [personId=" + personId + ", name=" + personName + ", tasks=" + (tasks==null ? 0 : tasks.size()) + "]";
	}
}
